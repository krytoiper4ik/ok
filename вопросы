1. C# — объектно-ориентированный язык программирования, используемый для разработки приложений на платформе .NET, включая веб, десктопные и мобильные приложения.

2. Особенности C#: статическая типизация, поддержка ООП, исключений, LINQ, асинхронного программирования, безопасности типов.

3. .NET Framework — это платформа для выполнения приложений, написанных на C#, с библиотеками классов и функцией поддержки кода. C# работает на .NET для взаимодействия с ОС и другими ресурсами.

4. CLR (Common Language Runtime) — среда выполнения, которая управляет кодом C#, выполняя его, управляя памятью и безопасностью.

5. Структура программы: пространство имен, классы, методы Main, который является точкой входа.

6. C# и другие языки: C# схож с Java (оба ООП), но лучше интегрирован с Windows. C++ позволяет низкоуровневую работу с памятью, чего нет в C#.

7. Пространства имен (namespace) группируют классы для предотвращения конфликтов имен.

8. Сборка (assembly) — компилированный модуль кода, содержащий исполняемые файлы или библиотеки для .NET.

9. Управляемый код контролируется CLR, неуправляемый выполняется напрямую ОС.

10. JIT-компиляция (Just-In-Time) — компиляция кода в машинный во время выполнения для повышения производительности.

11. Типы данных: целочисленные (int), вещественные (float), символы (char), логические (bool) и строки.

12. Значимые и ссылочные типы: значимые (struct) хранят данные, ссылочные (class) — адрес.

13. Nullable-типы позволяют значимым типам принимать null, полезны для баз данных.

14. Размеры и диапазоны: например, int (-2,147,483,648 до 2,147,483,647), byte (0 до 255).

15. Строка (string) — последовательность символов, поддерживает операции сложения, поиска, замены.

16. Преобразование строки в число: int.Parse, Convert.ToInt32; число в строку — ToString().

17. Перечисления (enum) позволяют создавать набор именованных констант для упрощения кода.

18. var — неявная типизация, когда компилятор выводит тип переменной.

19. if выполняет блок кода, если условие истинно.

20. switch проверяет выражение на несколько значений, проще if при множественных проверках.

21. Условные операторы: &&, || для комбинирования условий.

22. Тернарный оператор: условие ? значение1 : значение2.

23. Логические операторы: && (и), || (или), ! (не).

24. Приоритеты логических операторов: ! > && > ||.

25. Сложные условия: сочетание && и || в выражениях.

26. Циклы: for, while, do-while.

27. for — для определенного количества повторений.

28. while — пока условие истинно, используется при неизвестном количестве итераций.

29. do-while выполняется хотя бы один раз, проверка условия в конце.

30. break — завершение цикла; continue — переход к следующей итерации.

31. Массив — набор элементов одного типа, создается с помощью new.

32. Доступ к элементам массива: по индексу, например arr[0].

33. Изменение размера массива: создание нового массива или использование Array.Resize.

34. Многомерные массивы — массивы с более чем одним измерением, создаются с [,].

35. Коллекции: динамические массивы, такие как List<T>, более гибкие.

36. Метод — функция в классе, объявляется с returnType MethodName().

37. Параметры: передаются по значению, можно по ссылке (ref, out).

38. Возвращаемое значение — результат метода, указывается его тип.
